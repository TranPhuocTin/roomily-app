import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:roomily/core/utils/result.dart';
import 'package:roomily/core/utils/room_type.dart' as api_room_type;
import 'package:roomily/data/models/models.dart';
import 'package:roomily/data/repositories/room_image_repository.dart';
import 'package:roomily/data/repositories/room_repository.dart';
import 'package:roomily/presentation/screens/room_detail_screen.dart';
import 'package:roomily/presentation/widgets/home/room_card.dart';
import 'package:roomily/presentation/widgets/home/featured_room_section.dart';
import 'package:roomily/presentation/widgets/home/shimmer_room_card.dart';
import 'package:roomily/presentation/widgets/search/filter_bottom_sheet.dart';
import 'package:get_it/get_it.dart';
import 'package:flutter/rendering.dart';
import 'package:roomily/core/services/tag_service.dart';
import 'package:roomily/core/services/auth_service.dart';
import 'package:roomily/data/repositories/ad_repository.dart';
import 'package:roomily/data/models/ad_click_request_model.dart';
import 'package:roomily/data/models/ad_click_response_model.dart';
import 'package:roomily/data/models/ad_impression_request_model.dart';
import 'package:roomily/core/utils/network_util.dart';
import 'package:roomily/data/repositories/recommendation_repository.dart';
import 'package:roomily/data/blocs/home/recommendation_cubit.dart';
import 'package:visibility_detector/visibility_detector.dart';
import 'dart:async';
import 'dart:math' as math;

import '../../data/blocs/room_filter/room_filter_cubit.dart';
import '../../data/blocs/room_filter/room_filter_state.dart';

class SeeAllRoomsScreen extends StatefulWidget {
  final String title;
  final String? roomType; // Lo·∫°i ph√≤ng (VIP, th∆∞·ªùng, v.v.)
  final RoomFilter? initialFilter;
  final bool shouldLoadInitialData;

  const SeeAllRoomsScreen({
    super.key,
    this.title = 'Danh s√°ch ph√≤ng',
    this.roomType,
    this.initialFilter,
    this.shouldLoadInitialData = true, // M·∫∑c ƒë·ªãnh l√† true ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng c√°c n∆°i kh√°c
  });

  @override
  State<SeeAllRoomsScreen> createState() => _SeeAllRoomsScreenState();
}

class _SeeAllRoomsScreenState extends State<SeeAllRoomsScreen> {
  late RoomFilterCubit _roomFilterCubit;
  final TextEditingController _searchController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  
  // Repository ƒë·ªÉ l·∫•y h√¨nh ·∫£nh ph√≤ng
  late RoomImageRepository _roomImageRepository;
  
  // Tr·∫°ng th√°i filter hi·ªán t·∫°i
  late RoomFilter _currentFilter;
  
  // Tr·∫°ng th√°i hi·ªÉn th·ªã filter
  bool _isFilterVisible = false;
  
  // Cache h√¨nh ·∫£nh ph√≤ng
  final Map<String, List<RoomImage>> _roomImagesCache = {};
  
  // Cache RoomCardData ƒë·ªÉ tracking promoted rooms
  final Map<String, RoomCardData> _roomCardDataCache = {};
  
  // Default limit for room queries
  static const int defaultLimit = 12;
  
  // Variables for tracking impressions
  final Set<String> _trackedRoomIds = {};
  final Map<String, Timer> _impressionTimers = {};
  static const Duration _impressionDelay = Duration(milliseconds: 1500); // 1.5 gi√¢y
  
  // Recommendation cubit ƒë·ªÉ l·∫•y promoted rooms
  late RecommendationCubit _recommendationCubit;
  
  // Services & Repositories for CPM tracking
  late AuthService _authService;
  late AdRepository _adRepository;

  @override
  void initState() {
    super.initState();
    
    // Kh·ªüi t·∫°o services v√† repositories
    _roomImageRepository = GetIt.instance<RoomImageRepository>();
    _authService = GetIt.instance<AuthService>();
    _adRepository = GetIt.instance<AdRepository>();
    
    // Kh·ªüi t·∫°o RecommendationCubit
    _recommendationCubit = RecommendationCubit(
      recommendationRepository: GetIt.instance<RecommendationRepository>(),
      roomRepository: GetIt.instance<RoomRepository>(),
      roomImageRepository: _roomImageRepository,
    );
    
    // T·∫£i danh s√°ch promoted rooms
    _loadPromotedRooms();
    
    // Kh·ªüi t·∫°o RoomFilterCubit
    _roomFilterCubit = RoomFilterCubit();
    
    // Kh·ªüi t·∫°o filter theo y√™u c·∫ßu shouldLoadInitialData
    if (widget.shouldLoadInitialData) {
      // Kh·ªüi t·∫°o filter b√¨nh th∆∞·ªùng n·∫øu c·∫ßn load d·ªØ li·ªáu ban ƒë·∫ßu
      _currentFilter = widget.initialFilter ?? RoomFilter.defaultFilter();
      
      // Ki·ªÉm tra v√† x·ª≠ l√Ω roomType t·ª´ tham s·ªë n·∫øu c√≥
      if (widget.roomType != null && widget.roomType!.isNotEmpty) {
        // Chuy·ªÉn ƒë·ªïi t·ª´ String sang RoomType enum
        api_room_type.RoomType? typeEnum;
        if (widget.roomType!.toUpperCase() == 'ROOM' || widget.roomType!.toUpperCase() == 'PH√íNG TR·ªå') {
          typeEnum = api_room_type.RoomType.ROOM;
        } else if (widget.roomType!.toUpperCase() == 'APARTMENT' || widget.roomType!.toUpperCase() == 'CHUNG C∆Ø') {
          typeEnum = api_room_type.RoomType.APARTMENT;
        }
        
        if (typeEnum != null) {
          _currentFilter = _currentFilter.copyWith(type: typeEnum);
        }
      }
      
      // Ensure limit is set to defaultLimit
      if (_currentFilter.limit != defaultLimit) {
        _currentFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: _currentFilter.ward,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit,
          tagIds: _currentFilter.tagIds,
        );
      }
    } else {
      // Kh·ªüi t·∫°o filter ho√†n to√†n tr·ªëng n·∫øu kh√¥ng c·∫ßn load d·ªØ li·ªáu ban ƒë·∫ßu
      _currentFilter = RoomFilterExtension.empty();
    }
    
    // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng filter c√≥ gi√° tr·ªã null thay v√¨ chu·ªói r·ªóng ƒë·ªÉ x·ª≠ l√Ω nh·∫•t qu√°n
    _currentFilter = _currentFilter.normalize();
    
    // T·∫£i d·ªØ li·ªáu ti·ªán √≠ch
    _loadAmenities();
    
    // Ch·ªâ t·∫£i danh s√°ch ph√≤ng v·ªõi filter ban ƒë·∫ßu n·∫øu shouldLoadInitialData l√† true
    if (widget.shouldLoadInitialData) {
      _roomFilterCubit.loadRooms(customFilter: _currentFilter);
    }
    
    // Th√™m listener cho scroll controller ƒë·ªÉ t·∫£i th√™m d·ªØ li·ªáu khi cu·ªôn ƒë·∫øn cu·ªëi
    _scrollController.addListener(_onScroll);
  }

  // T·∫£i danh s√°ch promoted rooms
  Future<void> _loadPromotedRooms() async {
    try {
      await _recommendationCubit.loadPromotedRooms();
      debugPrint('‚úÖ ƒê√£ t·∫£i promoted rooms');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t·∫£i promoted rooms: $e');
    }
  }

  @override
  void dispose() {
    _searchController.dispose();
    _scrollController.dispose();
    _roomFilterCubit.close();
    _recommendationCubit.close();
    
    // H·ªßy t·∫•t c·∫£ timers khi widget b·ªã dispose
    _impressionTimers.forEach((_, timer) => timer.cancel());
    _impressionTimers.clear();
    
    super.dispose();
  }

  void _onScroll() {
    if (!_scrollController.hasClients) return;
    
    final maxScroll = _scrollController.position.maxScrollExtent;
    final currentScroll = _scrollController.position.pixels;
    final state = _roomFilterCubit.state;
    
    // Ki·ªÉm tra n·∫øu ƒë√£ cu·ªôn ƒë·∫øn g·∫ßn cu·ªëi h∆°n v√† ch∆∞a ƒë·∫°t gi·ªõi h·∫°n
    if (currentScroll >= maxScroll - 300 && 
        !state.hasReachedMax && 
        state.status != RoomFilterStatus.loadingMore) {
      // Debug ƒë·ªÉ theo d√µi
      debugPrint('Loading more rooms at scroll position: $currentScroll / $maxScroll');
      _roomFilterCubit.loadMoreRooms();
    }
  }

  // L·∫•y h√¨nh ·∫£nh cho ph√≤ng
  Future<List<RoomImage>> _getRoomImages(String roomId) async {
    // Ki·ªÉm tra cache tr∆∞·ªõc
    if (_roomImagesCache.containsKey(roomId)) {
      final images = _roomImagesCache[roomId]!;
      debugPrint('üñºÔ∏è L·∫•y ·∫£nh t·ª´ cache cho room $roomId: ${images.length} ·∫£nh');
      if (images.isNotEmpty) {
        debugPrint('üñºÔ∏è URL ·∫£nh ƒë·∫ßu ti√™n t·ª´ cache: ${images.first.url}');
      }
      return images;
    }
    
    try {
      // G·ªçi API ƒë·ªÉ l·∫•y h√¨nh ·∫£nh
      final result = await _roomImageRepository.getRoomImages(roomId);
      
      // X·ª≠ l√Ω k·∫øt qu·∫£
      if (result is Success<List<RoomImage>>) {
        final images = result.data;
        debugPrint('üñºÔ∏è L·∫•y ·∫£nh cho room $roomId t·ª´ API: ${images.length} ·∫£nh');
        if (images.isNotEmpty) {
          debugPrint('üñºÔ∏è URL ·∫£nh ƒë·∫ßu ti√™n t·ª´ API: ${images.first.url}');
        } else {
          debugPrint('‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh cho room $roomId t·ª´ API');
        }
        // L∆∞u v√†o cache
        _roomImagesCache[roomId] = images;
        return images;
      } else {
        debugPrint('‚ùå L·∫•y ·∫£nh th·∫•t b·∫°i cho room $roomId');
        return [];
      }
    } catch (e) {
      debugPrint('‚ùå Error loading images for room $roomId: $e');
      return [];
    }
  }

  // T·∫°o RoomCardData t·ª´ Room v√† danh s√°ch h√¨nh ·∫£nh, ki·ªÉm tra n·∫øu l√† promoted room
  RoomCardData _createRoomCardData(Room room, List<RoomImage> images) {
    // N·∫øu room ƒë√£ ƒë∆∞·ª£c cache, tr·∫£ v·ªÅ t·ª´ cache
    if (_roomCardDataCache.containsKey(room.id ?? '')) {
      return _roomCardDataCache[room.id ?? '']!;
    }
    
    // Debug th√¥ng tin ·∫£nh
    if (images.isNotEmpty) {
      debugPrint('üñºÔ∏è T·∫°o RoomCardData v·ªõi ·∫£nh URL: ${images.first.url}');
    } else {
      debugPrint('‚ö†Ô∏è T·∫°o RoomCardData kh√¥ng c√≥ ·∫£nh cho room ${room.id}');
    }
    
    // Ki·ªÉm tra n·∫øu room l√† promoted room
    final String? promotedRoomId = _recommendationCubit.getPromotedRoomId(room.id ?? '');
    
    RoomCardData roomCardData;
    if (promotedRoomId != null) {
      // N·∫øu l√† promoted room, t·∫°o PromotedRoomCardData
      roomCardData = PromotedRoomCardData(
        imageUrl: images.isNotEmpty ? images.first.url : '',
        name: room.title,
        price: '${room.price.toStringAsFixed(0)} ƒë',
        address: room.address,
        squareMeters: room.squareMeters?.toInt() ?? 0,
        id: room.id,
        isPromoted: true,
        score: 1.0, // Default score
        promotedRoomId: promotedRoomId,
      );
      debugPrint('üîç ƒê√£ ƒë√°nh d·∫•u promoted room: ${room.id}, promotedRoomId: $promotedRoomId');
    } else {
      // Tr∆∞·ªùng h·ª£p th∆∞·ªùng, t·∫°o RoomCardData th√¥ng th∆∞·ªùng
      roomCardData = RoomCardData(
        imageUrl: images.isNotEmpty ? images.first.url : '',
        name: room.title,
        price: '${room.price.toStringAsFixed(0)} ƒë',
        address: room.address,
        squareMeters: room.squareMeters?.toInt() ?? 0,
        id: room.id,
      );
    }
    
    // L∆∞u v√†o cache
    _roomCardDataCache[room.id ?? ''] = roomCardData;
    
    return roomCardData;
  }

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t t√¨m ki·∫øm
  void _handleSearch(String query) {
    if (query.isEmpty) return;
    
    // C·∫≠p nh·∫≠t filter v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm
    final newFilter = _currentFilter.copyWith(
      // Gi·∫£ s·ª≠ API h·ªó tr·ª£ t√¨m ki·∫øm theo t·ª´ kh√≥a
      // N·∫øu kh√¥ng, c·∫ßn th√™m tr∆∞·ªùng searchKeyword v√†o RoomFilter
    );
    
    setState(() {
      _currentFilter = newFilter;
    });
    
    // T·∫£i l·∫°i danh s√°ch ph√≤ng v·ªõi filter m·ªõi
    _roomFilterCubit.loadRooms(customFilter: newFilter);
  }

  // Hi·ªÉn th·ªã bottom sheet filter
  void _showFilterBottomSheet() {
    setState(() {
      _isFilterVisible = true;
    });
    
    // Chu·∫©n h√≥a filter tr∆∞·ªõc khi truy·ªÅn cho FilterBottomSheet
    final normalizedFilter = _currentFilter.normalize();
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => FilterBottomSheet(
        initialFilter: normalizedFilter,
        onApplyFilter: (filter) {
          // Chu·∫©n h√≥a filter nh·∫≠n ƒë∆∞·ª£c t·ª´ FilterBottomSheet
          final normalizedReturnedFilter = filter.normalize();
          setState(() {
            _currentFilter = normalizedReturnedFilter;
            _isFilterVisible = false;
          });
          
          // T·∫£i l·∫°i danh s√°ch ph√≤ng v·ªõi filter m·ªõi
          _roomFilterCubit.loadRooms(customFilter: normalizedReturnedFilter);
          
          // Kh√¥ng c·∫ßn ƒë√≥ng bottom sheet ·ªü ƒë√¢y v√¨ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong FilterBottomSheet
        },
        onClose: () {
          setState(() {
            _isFilterVisible = false;
          });
          
          // Kh√¥ng c·∫ßn ƒë√≥ng bottom sheet ·ªü ƒë√¢y v√¨ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong FilterBottomSheet
        },
      ),
    ).then((_) {
      // ƒê·∫£m b·∫£o _isFilterVisible ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi bottom sheet ƒë√≥ng
      // b·∫±ng c√°ch kh√°c (nh∆∞ vu·ªët xu·ªëng)
      if (_isFilterVisible) {
        setState(() {
          _isFilterVisible = false;
        });
      }
    });
  }
  
  // X·ª≠ l√Ω tracking impression khi room ƒë∆∞·ª£c hi·ªÉn th·ªã
  void _handleRoomVisibilityChanged(RoomCardData room, double visibleFraction) {
    // Ch·ªâ x·ª≠ l√Ω n·∫øu l√† promoted room
    if (room is! PromotedRoomCardData || room.promotedRoomId == null) {
      return;
    }
    
    // ƒê·∫£m b·∫£o promotedRoomId kh√¥ng null v√† ch∆∞a ƒë∆∞·ª£c track
    final promotedRoomId = room.promotedRoomId!;
    if (_trackedRoomIds.contains(promotedRoomId)) {
      return; // ƒê√£ track r·ªìi
    }

    if (visibleFraction > 0.7) {
      // Room tr·ªü n√™n hi·ªÉn th·ªã, b·∫Øt ƒë·∫ßu timer n·∫øu ch∆∞a c√≥
      if (!_impressionTimers.containsKey(promotedRoomId)) {
        debugPrint('‚è±Ô∏è B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian hi·ªÉn th·ªã cho room: $promotedRoomId');
        _impressionTimers[promotedRoomId] = Timer(_impressionDelay, () {
          debugPrint('‚è±Ô∏è ƒê√£ hi·ªÉn th·ªã ƒë·ªß 1.5 gi√¢y cho room: $promotedRoomId');
          _trackImpressions([room]);
          _impressionTimers.remove(promotedRoomId);
        });
      }
    } else {
      // Room kh√¥ng c√≤n hi·ªÉn th·ªã ƒë·ªß, h·ªßy timer n·∫øu c√≥
      if (_impressionTimers.containsKey(promotedRoomId)) {
        debugPrint('‚è±Ô∏è H·ªßy timer cho room v√¨ kh√¥ng c√≤n hi·ªÉn th·ªã ƒë·ªß: $promotedRoomId');
        _impressionTimers[promotedRoomId]?.cancel();
        _impressionTimers.remove(promotedRoomId);
      }
    }
  }

  // Helper ƒë·ªÉ t·∫°o AdImpressionRequestModel an to√†n
  AdImpressionRequestModel _createImpressionRequest(List<String> promotedRoomIds, String userId) {
    return AdImpressionRequestModel(
      promotedRoomIds: promotedRoomIds,
      userId: userId,
    );
  }
  
  // Helper ƒë·ªÉ t·∫°o AdClickRequestModel an to√†n
  AdClickRequestModel _createClickRequest(String promotedRoomId, String ipAddress, String userId) {
    return AdClickRequestModel(
      promotedRoomId: promotedRoomId,
      ipAddress: ipAddress,
      userId: userId,
    );
  }
  
  // ƒê·ªãnh nghƒ©a l·∫°i c√°ch tri·ªÉn khai _trackImpressions
  Future<void> _trackImpressions(List<PromotedRoomCardData> visiblePromotedRooms) async {
    // L·ªçc c√°c ph√≤ng c√≥ promotedRoomId v√† ch∆∞a ƒë∆∞·ª£c track
    final promotedRooms = visiblePromotedRooms
        .where((room) => room.promotedRoomId != null && !_trackedRoomIds.contains(room.promotedRoomId))
        .toList();
    
    if (promotedRooms.isEmpty) return;
    
    // L·∫•y userId t·ª´ AuthService
    final userId = _authService.userId;
    if (userId == null) {
      debugPrint('‚ö†Ô∏è Kh√¥ng c√≥ userId, kh√¥ng th·ªÉ track impressions');
      return;
    }
    
    try {
      // T·∫°o danh s√°ch promotedRoomIds (ch·∫Øc ch·∫Øn kh√¥ng null)
      final List<String> promotedRoomIds = [];
      for (final room in promotedRooms) {
        if (room.promotedRoomId != null) {
          promotedRoomIds.add(room.promotedRoomId!);
        }
      }
      
      if (promotedRoomIds.isEmpty) return;
      
      debugPrint('üëÅÔ∏è Tracking impressions for rooms: $promotedRoomIds');
      
      // T·∫°o v√† g·ª≠i request
      final request = _createImpressionRequest(promotedRoomIds, userId);
      await _adRepository.trackPromotedRoomImpression(request);
      
      // ƒê√°nh d·∫•u c√°c ph√≤ng ƒë√£ ƒë∆∞·ª£c track
      for (final id in promotedRoomIds) {
        _trackedRoomIds.add(id);
      }
      
      debugPrint('‚úÖ Successfully tracked impressions');
    } catch (e) {
      debugPrint('‚ùå Error tracking impressions: $e');
    }
  }

  // X·ª≠ l√Ω khi room ƒë∆∞·ª£c nh·∫•n v√†o
  Future<void> _handleRoomTap(BuildContext context, RoomCardData room) async {
    if (room.id == null) return;
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i l√† promoted room kh√¥ng
    if (room is PromotedRoomCardData && room.isPromoted && room.promotedRoomId != null) {
      final promotedRoomId = room.promotedRoomId!;
      
      try {
        debugPrint('üîç ƒê√¢y l√† promoted room, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω tracking...');
        
        // L·∫•y userId
        final userId = _authService.userId;
        if (userId == null) {
          debugPrint('‚ö†Ô∏è Kh√¥ng c√≥ userId, chuy·ªÉn ƒë·∫øn chi ti·∫øt ph√≤ng m√† kh√¥ng track');
          _navigateToRoomDetail(context, room.id!);
          return;
        }
        
        // L·∫•y IP address
        final ipAddress = await NetworkUtil.getIPv4Address();
        if (ipAddress == null) {
          debugPrint('‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c IP, chuy·ªÉn ƒë·∫øn chi ti·∫øt ph√≤ng m√† kh√¥ng track');
          _navigateToRoomDetail(context, room.id!);
          return;
        }
        
        // T·∫°o request
        final request = _createClickRequest(promotedRoomId, ipAddress, userId);
        
        // G·ª≠i request
        final response = await _adRepository.trackPromotedRoomClick(request);
        
        // Ki·ªÉm tra response
        if (response.status == "error" || response.status == "duplicate") {
          debugPrint('‚ö†Ô∏è Response status l√† "${response.status}", kh√¥ng truy·ªÅn adClickResponse');
          _navigateToRoomDetail(context, room.id!);
          return;
        }
        
        // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh chi ti·∫øt
        _navigateToRoomDetail(context, room.id!, adClickResponse: response);
      } catch (e) {
        debugPrint('‚ùå Error tracking click: $e');
        _navigateToRoomDetail(context, room.id!);
      }
    } else {
      // Tr∆∞·ªùng h·ª£p th∆∞·ªùng
      _navigateToRoomDetail(context, room.id!);
    }
  }

  // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh chi ti·∫øt ph√≤ng
  void _navigateToRoomDetail(BuildContext context, String roomId, {AdClickResponseModel? adClickResponse}) {
    Navigator.of(context).push(MaterialPageRoute(
      builder: (context) => RoomDetailScreen(
        roomId: roomId,
        adClickResponse: adClickResponse,
      ),
    ));
  }

  @override
  Widget build(BuildContext context) {
    // Debug log khi build ƒë∆∞·ª£c g·ªçi
    debugPrint('Building UI with filter: $_currentFilter');
    
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Text(
          widget.title,
          style: const TextStyle(
            color: Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            icon: Icon(
              Icons.filter_list,
              color: _isFilterVisible ? Colors.blue : Colors.grey[700],
            ),
            onPressed: _showFilterBottomSheet,
          ),
        ],
      ),
      body: Column(
        children: [
          // Search bar
          // Padding(
          //   padding: const EdgeInsets.all(16.0),
          //   child: TextField(
          //     controller: _searchController,
          //     decoration: InputDecoration(
          //       hintText: 'T√¨m ki·∫øm ph√≤ng...',
          //       prefixIcon: const Icon(Icons.search),
          //       suffixIcon: IconButton(
          //         icon: const Icon(Icons.clear),
          //         onPressed: () {
          //           _searchController.clear();
          //         },
          //       ),
          //       border: OutlineInputBorder(
          //         borderRadius: BorderRadius.circular(30),
          //         borderSide: BorderSide(color: Colors.grey[300]!),
          //       ),
          //       enabledBorder: OutlineInputBorder(
          //         borderRadius: BorderRadius.circular(30),
          //         borderSide: BorderSide(color: Colors.grey[300]!),
          //       ),
          //       focusedBorder: OutlineInputBorder(
          //         borderRadius: BorderRadius.circular(30),
          //         borderSide: const BorderSide(color: Colors.blue),
          //       ),
          //       filled: true,
          //       fillColor: Colors.grey[100],
          //       contentPadding: const EdgeInsets.symmetric(vertical: 0),
          //     ),
          //     onSubmitted: _handleSearch,
          //   ),
          // ),
          
          // Filter chips - Ch·ªâ hi·ªÉn th·ªã khi c√≥ filter ƒëang active
          if (_hasActiveFilters())
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Row(
                key: ValueKey('filter_chips_row_${_currentFilter.hashCode}'),
                children: _buildFilterChips(),
              ),
            ),
          
          // Danh s√°ch ph√≤ng
          Expanded(
            child: BlocBuilder<RoomFilterCubit, RoomFilterState>(
              bloc: _roomFilterCubit,
              builder: (context, state) {
                // Ch·ªâ hi·ªÉn th·ªã shimmer khi ƒëang t·∫£i d·ªØ li·ªáu, kh√¥ng hi·ªÉn th·ªã khi ·ªü tr·∫°ng th√°i initial v√† ch∆∞a load data
                if (state.status == RoomFilterStatus.loading && state.rooms.isEmpty) {
                  // Hi·ªÉn th·ªã shimmer ch·ªâ khi ƒëang t·∫£i
                  return GridView.builder(
                    padding: const EdgeInsets.all(16),
                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      mainAxisSpacing: 8,
                      crossAxisSpacing: 8,
                      childAspectRatio: 0.6,
                    ),
                    itemCount: 6,
                    itemBuilder: (context, index) => const ShimmerRoomCard(),
                  );
                } else if (state.status == RoomFilterStatus.error) {
                  // Hi·ªÉn th·ªã l·ªói
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.error_outline, size: 48, color: Colors.red),
                        const SizedBox(height: 16),
                        Text(
                          'ƒê√£ x·∫£y ra l·ªói: ${state.errorMessage}',
                          style: const TextStyle(fontSize: 16),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: () {
                            _roomFilterCubit.loadRooms(customFilter: _currentFilter);
                          },
                          child: const Text('Th·ª≠ l·∫°i'),
                        ),
                      ],
                    ),
                  );
                } else if (state.status == RoomFilterStatus.initial && !widget.shouldLoadInitialData) {
                  // Tr·∫°ng th√°i kh·ªüi t·∫°o v√† kh√¥ng c·∫ßn load d·ªØ li·ªáu ban ƒë·∫ßu - hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ch·ªçn b·ªô l·ªçc
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.filter_alt_outlined, size: 64, color: Colors.grey[400]),
                        const SizedBox(height: 16),
                        Text(
                          'Ch·ªçn b·ªô l·ªçc ƒë·ªÉ t√¨m ph√≤ng',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.grey[600],
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng b·ªô l·ªçc ·ªü g√≥c tr√™n b√™n ph·∫£i ƒë·ªÉ b·∫Øt ƒë·∫ßu',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[500],
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton.icon(
                          onPressed: _showFilterBottomSheet,
                          icon: const Icon(Icons.filter_list),
                          label: const Text('M·ªü b·ªô l·ªçc'),
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                          ),
                        ),
                      ],
                    ),
                  );
                } else if (state.status == RoomFilterStatus.empty) {
                  // Hi·ªÉn th·ªã r√µ r√†ng khi status l√† empty
                  debugPrint('Rendering empty state UI with filter: ${state.filter}');
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.search_off, size: 48, color: Colors.grey),
                        const SizedBox(height: 16),
                        Text(
                          'Kh√¥ng t√¨m th·∫•y ph√≤ng ·ªü ${state.filter.city ?? "ƒë·ªãa ƒëi·ªÉm n√†y"}',
                          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 8),
                        const Text(
                          'Vui l√≤ng th·ª≠ v·ªõi b·ªô l·ªçc kh√°c',
                          style: TextStyle(fontSize: 16),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton.icon(
                          onPressed: _showFilterBottomSheet,
                          icon: const Icon(Icons.filter_list),
                          label: const Text('Thay ƒë·ªïi b·ªô l·ªçc'),
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                          ),
                        ),
                      ],
                    ),
                  );
                } else if (state.rooms.isEmpty) {
                  // Tr∆∞·ªùng h·ª£p rooms r·ªóng nh∆∞ng kh√¥ng ph·∫£i status empty
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.search_off, size: 48, color: Colors.grey),
                        const SizedBox(height: 16),
                        const Text(
                          'Kh√¥ng t√¨m th·∫•y ph√≤ng n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc',
                          style: TextStyle(fontSize: 16),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: _showFilterBottomSheet,
                          child: const Text('Thay ƒë·ªïi b·ªô l·ªçc'),
                        ),
                      ],
                    ),
                  );
                } else {
                  // Hi·ªÉn th·ªã danh s√°ch ph√≤ng
                  
                  // √Åp d·ª•ng thu·∫≠t to√°n ph√¢n ph·ªëi promoted rooms
                  final List<Room> distributedRooms = distributePromotedRooms(state.rooms);
                  
                  return Stack(
                    children: [
                      Column(
                        children: [
                          Expanded(
                            child: GridView.builder(
                              controller: _scrollController,
                              physics: const AlwaysScrollableScrollPhysics(),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16, 
                                vertical: 16,
                              ),
                              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                                crossAxisCount: 2,
                                mainAxisSpacing: 8,
                                crossAxisSpacing: 8,
                                childAspectRatio: 0.6,
                              ),
                              itemCount: distributedRooms.length,
                              itemBuilder: (context, index) {                            
                                final room = distributedRooms[index];
                                
                                return _buildRoomCard(room, context);
                              },
                            ),
                          ),
                          
                          // Hi·ªÉn th·ªã footer loading khi ƒëang t·∫£i th√™m
                          if (state.status == RoomFilterStatus.loadingMore)
                            Container(
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              // Avoid overflow by constraining height
                              height: 60,
                              alignment: Alignment.center,
                              child: _buildLoadingMoreFooter(),
                            ),
                        ],
                      ),
                      
                      // Hi·ªÉn th·ªã loading indicator overlay khi ƒëang t·∫£i (nh∆∞ng kh√¥ng ph·∫£i t·∫£i th√™m)
                      if (state.status == RoomFilterStatus.loading && state.rooms.isNotEmpty)
                        const Positioned.fill(
                          child: Center(
                            child: CircularProgressIndicator(),
                          ),
                        ),
                    ],
                  );
                }
              },
            ),
          ),
        ],
      ),
    );
  }

  // T·∫°o filter chip
  Widget _buildFilterChip(String label, VoidCallback onRemove, {bool isRemoveAll = false}) {
    // S·ª≠ d·ª•ng m√†u ch·ªß ƒë·∫°o Indigo 500 (0xFF3F51B5) gi·ªëng trong FilterBottomSheet
    final primaryColor = const Color(0xFF3F51B5);
    // S·ª≠ d·ª•ng m√†u accent Deep Orange 500 (0xFFFF5722) cho n√∫t x√≥a t·∫•t c·∫£
    final accentColor = const Color(0xFFFF5722);
    
    // T·∫°o key duy nh·∫•t cho m·ªói chip d·ª±a tr√™n label
    final chipKey = ValueKey('filter_chip_${label.hashCode}');
    
    return Padding(
      key: chipKey,
      padding: const EdgeInsets.only(right: 8.0, bottom: 8.0),
      child: Chip(
        label: Text(
          label,
          style: TextStyle(
            color: isRemoveAll ? accentColor : primaryColor,
            fontWeight: FontWeight.w500,
          ),
        ),
        deleteIcon: Icon(
          isRemoveAll ? Icons.clear_all : Icons.clear,
          size: 18,
        ),
        onDeleted: () {
          debugPrint('Filter chip deleted: $label');
          onRemove();
        },
        backgroundColor: isRemoveAll ? accentColor.withOpacity(0.1) : primaryColor.withOpacity(0.1),
        deleteIconColor: isRemoveAll ? accentColor : primaryColor,
        elevation: 1,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
          side: BorderSide(
            color: isRemoveAll ? accentColor.withOpacity(0.3) : primaryColor.withOpacity(0.3),
            width: 1,
          ),
        ),
      ),
    );
  }

  // Ki·ªÉm tra xem c√≥ filter n√†o ƒëang ƒë∆∞·ª£c √°p d·ª•ng kh√¥ng
  bool _hasActiveFilters() {
    return _currentFilter.isActive;
  }


  // Helper method ƒë·ªÉ chuy·ªÉn ƒë·ªïi RoomType sang text hi·ªÉn th·ªã
  String _roomTypeToDisplayText(api_room_type.RoomType? type) {
    if (type == null || type == api_room_type.RoomType.ALL) return 'T·∫•t c·∫£';
    
    switch (type) {
      case api_room_type.RoomType.ROOM:
        return 'Ph√≤ng tr·ªç';
      case api_room_type.RoomType.APARTMENT:
        return 'Chung c∆∞';
      default:
        return type.toString().split('.').last;
    }
  }

  // ƒê·ªãnh d·∫°ng gi√° ti·ªÅn ƒë·ªÉ hi·ªÉn th·ªã (vd: 1,000,000)
  String _formatPrice(double price) {
    return price.toStringAsFixed(0).replaceAllMapped(
      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
      (Match m) => '${m[1]},'
    );
  }

  // L·∫•y t√™n ti·ªán √≠ch t·ª´ tagId
  String _getAmenityName(String tagId) {
    // S·ª≠ d·ª•ng TagService ƒë·ªÉ l·∫•y t√™n ti·ªán √≠ch t·ª´ ID
    final tagService = GetIt.instance<TagService>();
    final tag = tagService.getTagById(tagId);
    
    // N·∫øu t√¨m th·∫•y tag, tr·∫£ v·ªÅ t√™n c·ªßa n√≥, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ ID
    return tag?.displayName ?? tagId;
  }

  // Ph∆∞∆°ng th·ª©c m·ªõi: √Åp d·ª•ng b·ªô l·ªçc v√† t·∫£i l·∫°i d·ªØ li·ªáu
  void _applyFilterAndReload(RoomFilter newFilter) {
    // Debug print ƒë·ªÉ theo d√µi filter tr∆∞·ªõc khi thay ƒë·ªïi
    debugPrint('Before filter change: $_currentFilter');
    
    // X·ª≠ l√Ω m·ªëi quan h·ªá ph·ª• thu·ªôc
    // N·∫øu city ƒë∆∞·ª£c ƒë·∫∑t v·ªÅ null, h√£y ƒë·∫£m b·∫£o district v√† ward c≈©ng null
    if (newFilter.city == null && _currentFilter.city != null) {
      debugPrint('City is null, setting district and ward to null');
      newFilter = RoomFilter(
        city: null,
        district: null,
        ward: null,
        type: newFilter.type,
        minPrice: newFilter.minPrice,
        maxPrice: newFilter.maxPrice,
        minPeople: newFilter.minPeople,
        maxPeople: newFilter.maxPeople,
        limit: defaultLimit, // Use the constant
        tagIds: newFilter.tagIds,
        hasFindPartnerPost: newFilter.hasFindPartnerPost,
      );
    }
    
    // N·∫øu district ƒë∆∞·ª£c ƒë·∫∑t v·ªÅ null, h√£y ƒë·∫£m b·∫£o ward c≈©ng null
    if (newFilter.district == null && _currentFilter.district != null) {
      debugPrint('District is null, setting ward to null');
      newFilter = RoomFilter(
        city: newFilter.city,
        district: null,
        ward: null,
        type: newFilter.type,
        minPrice: newFilter.minPrice,
        maxPrice: newFilter.maxPrice,
        minPeople: newFilter.minPeople,
        maxPeople: newFilter.maxPeople,
        limit: defaultLimit, // Use the constant
        tagIds: newFilter.tagIds,
        hasFindPartnerPost: newFilter.hasFindPartnerPost,
      );
    }
    
    // Ensure limit is always set to defaultLimit
    if (newFilter.limit != defaultLimit) {
      debugPrint('Setting limit to defaultLimit: $defaultLimit');
      newFilter = RoomFilter(
        city: newFilter.city,
        district: newFilter.district,
        ward: newFilter.ward,
        type: newFilter.type,
        minPrice: newFilter.minPrice,
        maxPrice: newFilter.maxPrice,
        minPeople: newFilter.minPeople,
        maxPeople: newFilter.maxPeople,
        limit: defaultLimit,
        tagIds: newFilter.tagIds,
        hasFindPartnerPost: newFilter.hasFindPartnerPost,
      );
    }
    
    // Chu·∫©n h√≥a filter tr∆∞·ªõc khi √°p d·ª•ng
    final normalizedFilter = newFilter.normalize();
    
    // Debug print ƒë·ªÉ theo d√µi filter sau khi chu·∫©n h√≥a
    debugPrint('After normalization: $normalizedFilter');
    
    // Lu√¥n c·∫≠p nh·∫≠t UI v√† t·∫£i l·∫°i d·ªØ li·ªáu khi filter thay ƒë·ªïi
    setState(() {
      _currentFilter = normalizedFilter;
      debugPrint('Updated _currentFilter in setState: $_currentFilter');
    });
    
    // T·∫£i l·∫°i danh s√°ch ph√≤ng v·ªõi filter m·ªõi
    _roomFilterCubit.loadRooms(customFilter: normalizedFilter);
    debugPrint('Called loadRooms with filter: $normalizedFilter');
  }

  List<Widget> _buildFilterChips() {
    List<Widget> chips = [];

    if (_currentFilter.city != null && _currentFilter.city!.isNotEmpty) {
      chips.add(_buildFilterChip('Th√†nh ph·ªë: ${_currentFilter.city}', () {
        // Debug print khi chip city ƒë∆∞·ª£c click
        debugPrint('City chip clicked! Current city: ${_currentFilter.city}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: null,
          district: null,
          ward: null,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with null city: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - city: ${_currentFilter.city}, district: ${_currentFilter.district}, ward: ${_currentFilter.ward}');
      }));
    }

    if (_currentFilter.district != null && _currentFilter.district!.isNotEmpty) {
      chips.add(_buildFilterChip('Qu·∫≠n: ${_currentFilter.district}', () {
        // Debug print khi chip district ƒë∆∞·ª£c click
        debugPrint('District chip clicked! Current district: ${_currentFilter.district}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: null,
          ward: null,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with null district: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - city: ${_currentFilter.city}, district: ${_currentFilter.district}, ward: ${_currentFilter.ward}');
      }));
    }

    if (_currentFilter.ward != null && _currentFilter.ward!.isNotEmpty) {
      chips.add(_buildFilterChip('Ph∆∞·ªùng: ${_currentFilter.ward}', () {
        // Debug print khi chip ward ƒë∆∞·ª£c click
        debugPrint('Ward chip clicked! Current ward: ${_currentFilter.ward}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: null,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with null ward: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - city: ${_currentFilter.city}, district: ${_currentFilter.district}, ward: ${_currentFilter.ward}');
      }));
    }

    // Ch·ªâ hi·ªÉn th·ªã chip lo·∫°i ph√≤ng n·∫øu kh√¥ng ph·∫£i ALL
    if (_currentFilter.type != null && _currentFilter.type != api_room_type.RoomType.ALL) {
      chips.add(_buildFilterChip('Lo·∫°i: ${_roomTypeToDisplayText(_currentFilter.type)}', () {
        // Debug print khi chip type ƒë∆∞·ª£c click
        debugPrint('Type chip clicked! Current type: ${_currentFilter.type}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: _currentFilter.ward,
          type: api_room_type.RoomType.ALL,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with ALL type: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - type: ${_currentFilter.type}');
      }));
    }

    if (_currentFilter.minPrice != null) {
      chips.add(_buildFilterChip('Gi√° t·ª´: ${_formatPrice(_currentFilter.minPrice!)}ƒë', () {
        // Debug print khi chip minPrice ƒë∆∞·ª£c click
        debugPrint('MinPrice chip clicked! Current minPrice: ${_currentFilter.minPrice}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: _currentFilter.ward,
          type: _currentFilter.type,
          minPrice: null,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with null minPrice: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - minPrice: ${_currentFilter.minPrice}');
      }));
    }

    if (_currentFilter.maxPrice != null) {
      chips.add(_buildFilterChip('Gi√° ƒë·∫øn: ${_formatPrice(_currentFilter.maxPrice!)}ƒë', () {
        // Debug print khi chip maxPrice ƒë∆∞·ª£c click
        debugPrint('MaxPrice chip clicked! Current maxPrice: ${_currentFilter.maxPrice}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: _currentFilter.ward,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: null,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with null maxPrice: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - maxPrice: ${_currentFilter.maxPrice}');
      }));
    }

    if (_currentFilter.minPeople != null) {
      chips.add(_buildFilterChip('S·ªë ng∆∞·ªùi t·ªëi thi·ªÉu: ${_currentFilter.minPeople}', () {
        // Debug print khi chip minPeople ƒë∆∞·ª£c click
        debugPrint('MinPeople chip clicked! Current minPeople: ${_currentFilter.minPeople}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: _currentFilter.ward,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: null,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with null minPeople: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - minPeople: ${_currentFilter.minPeople}');
      }));
    }

    if (_currentFilter.maxPeople != null) {
      chips.add(_buildFilterChip('S·ªë ng∆∞·ªùi t·ªëi ƒëa: ${_currentFilter.maxPeople}', () {
        // Debug print khi chip maxPeople ƒë∆∞·ª£c click
        debugPrint('MaxPeople chip clicked! Current maxPeople: ${_currentFilter.maxPeople}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: _currentFilter.ward,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: null,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
        );
        
        debugPrint('Created new filter with null maxPeople: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying filter - maxPeople: ${_currentFilter.maxPeople}');
      }));
    }

    // Add filter chip for hasFindPartnerPost
    if (_currentFilter.hasFindPartnerPost == true) {
      chips.add(_buildFilterChip('T√¨m ng∆∞·ªùi ·ªü gh√©p', () {
        // Debug print when hasFindPartnerPost chip is clicked
        debugPrint('hasFindPartnerPost chip clicked! Current value: ${_currentFilter.hasFindPartnerPost}');
        
        // Create a completely new filter instead of using copyWith
        final newFilter = RoomFilter(
          city: _currentFilter.city,
          district: _currentFilter.district,
          ward: _currentFilter.ward,
          type: _currentFilter.type,
          minPrice: _currentFilter.minPrice,
          maxPrice: _currentFilter.maxPrice,
          minPeople: _currentFilter.minPeople,
          maxPeople: _currentFilter.maxPeople,
          limit: defaultLimit, // Use the constant
          tagIds: _currentFilter.tagIds,
          hasFindPartnerPost: null, // Reset to null to disable this filter
        );
        
        debugPrint('Created new filter with null hasFindPartnerPost: $newFilter');
        _applyFilterAndReload(newFilter);
        
        // Debug print after applying new filter
        debugPrint('After applying filter - hasFindPartnerPost: ${_currentFilter.hasFindPartnerPost}');
      }));
    }

    if (_currentFilter.tagIds != null && _currentFilter.tagIds!.isNotEmpty) {
      for (var tagId in _currentFilter.tagIds!) {
        chips.add(_buildFilterChip('Ti·ªán √≠ch: ${_getAmenityName(tagId)}', () {
          // Debug print khi chip tagId ƒë∆∞·ª£c click
          debugPrint('TagId chip clicked! Current tagId: $tagId');
          
          // Create a new list without the removed tag
          final List<String> newTagIds = List.from(_currentFilter.tagIds!);
          newTagIds.remove(tagId);
          
          // Create a completely new filter instead of using copyWith
          final newFilter = RoomFilter(
            city: _currentFilter.city,
            district: _currentFilter.district,
            ward: _currentFilter.ward,
            type: _currentFilter.type,
            minPrice: _currentFilter.minPrice,
            maxPrice: _currentFilter.maxPrice,
            minPeople: _currentFilter.minPeople,
            maxPeople: _currentFilter.maxPeople,
            limit: defaultLimit, // Use the constant
            tagIds: newTagIds.isEmpty ? null : newTagIds,
            hasFindPartnerPost: _currentFilter.hasFindPartnerPost,
          );
          
          debugPrint('Created new filter with updated tagIds: $newFilter');
          _applyFilterAndReload(newFilter);
          
          // Debug print sau khi √°p d·ª•ng filter m·ªõi
          debugPrint('After applying filter - tagIds: ${_currentFilter.tagIds}');
        }));
      }
    }

    if (_hasActiveFilters()) {
      chips.add(_buildFilterChip('X√≥a t·∫•t c·∫£', () {
        // Debug print khi chip x√≥a t·∫•t c·∫£ ƒë∆∞·ª£c click
        debugPrint('Clear all chip clicked!');
        
        // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c static t·ª´ extension
        final emptyFilter = RoomFilterExtension.empty();
        debugPrint('Created empty filter: $emptyFilter');
        
        _applyFilterAndReload(emptyFilter);
        
        // Debug print sau khi √°p d·ª•ng filter m·ªõi
        debugPrint('After applying empty filter - city: ${_currentFilter.city}, district: ${_currentFilter.district}, ward: ${_currentFilter.ward}');
      }, isRemoveAll: true));
    }

    return chips;
  }

  // T·∫£i d·ªØ li·ªáu ti·ªán √≠ch
  Future<void> _loadAmenities() async {
    try {
      final tagService = GetIt.instance<TagService>();
      await tagService.getAllTags();
    } catch (e) {
      debugPrint('Error loading amenities: $e');
    }
  }

  // Hi·ªÉn th·ªã footer loading khi t·∫£i th√™m d·ªØ li·ªáu
  Widget _buildLoadingMoreFooter() {
    return Row(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          'ƒêang t·∫£i th√™m ph√≤ng...',
          style: TextStyle(
            fontSize: 13,
            color: Theme.of(context).primaryColor,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(width: 8),
        SizedBox(
          width: 14,
          height: 14,
          child: CircularProgressIndicator(
            strokeWidth: 2,
            valueColor: AlwaysStoppedAnimation<Color>(Theme.of(context).primaryColor),
          ),
        ),
      ],
    );
  }

  // Th√™m ph∆∞∆°ng th·ª©c getter tr·ª±c ti·∫øp trong FutureBuilder
  Widget _buildRoomCard(Room room, BuildContext context) {
    if (room.id == null) {
      return const ShimmerRoomCard();
    }
    
    return FutureBuilder<List<RoomImage>>(
      future: _getRoomImages(room.id!),
      builder: (context, snapshot) {
        // Th√™m x·ª≠ l√Ω khi ƒëang loading
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const ShimmerRoomCard();
        }
        
        // Th√™m x·ª≠ l√Ω khi c√≥ l·ªói
        if (snapshot.hasError) {
          debugPrint('‚ùå Error loading images in FutureBuilder: ${snapshot.error}');
          
          // V·∫´n hi·ªÉn th·ªã RoomCard nh∆∞ng kh√¥ng c√≥ ·∫£nh
          final roomCardData = _createRoomCardData(room, []);
          return RoomCard(
            imageUrl: '',
            roomName: roomCardData.name,
            price: roomCardData.price,
            address: roomCardData.address,
            squareMeters: roomCardData.squareMeters,
            onTap: () => _handleRoomTap(context, roomCardData),
          );
        }
        
        // L·∫•y d·ªØ li·ªáu ·∫£nh
        final images = snapshot.data ?? [];
        debugPrint('üñºÔ∏è FutureBuilder c√≥ ${images.length} ·∫£nh cho room ${room.id}');
        
        // T·∫°o room card data
        final roomCardData = _createRoomCardData(room, images);
        
        // Ki·ªÉm tra n·∫øu l√† promoted room, wrap v·ªõi VisibilityDetector
        if (roomCardData is PromotedRoomCardData && roomCardData.promotedRoomId != null) {
          final String safePromotedRoomId = roomCardData.promotedRoomId!;
          return VisibilityDetector(
            key: Key('promoted_room_$safePromotedRoomId'),
            onVisibilityChanged: (visibilityInfo) {
              _handleRoomVisibilityChanged(roomCardData, visibilityInfo.visibleFraction);
            },
            child: RoomCard(
              imageUrl: roomCardData.imageUrl,
              isPromoted: safePromotedRoomId == _recommendationCubit.getPromotedRoomId(room.id ?? ''),
              roomName: roomCardData.name,
              price: roomCardData.price,
              address: roomCardData.address,
              squareMeters: roomCardData.squareMeters,
              onTap: () => _handleRoomTap(context, roomCardData),
            ),
          );
        }
        
        // N·∫øu kh√¥ng ph·∫£i promoted room, hi·ªÉn th·ªã RoomCard b√¨nh th∆∞·ªùng
        return RoomCard(
          imageUrl: roomCardData.imageUrl,
          roomName: roomCardData.name,
          price: roomCardData.price,
          address: roomCardData.address,
          squareMeters: roomCardData.squareMeters,
          onTap: () => _handleRoomTap(context, roomCardData),
        );
      },
    );
  }

  // Ph∆∞∆°ng th·ª©c ph√¢n ph·ªëi promoted rooms ƒëan xen v√†o danh s√°ch
  List<Room> distributePromotedRooms(List<Room> allRooms) {
    // T√°ch danh s√°ch th√†nh promoted v√† non-promoted
    final List<Room> promotedRooms = [];
    final List<Room> normalRooms = [];
    final Map<String, double> roomScores = {}; // L∆∞u score cho t·ª´ng room
    
    // Duy·ªát qua danh s√°ch ƒë·ªÉ ph√¢n lo·∫°i ph√≤ng
    for (var room in allRooms) {
      final String? promotedRoomId = _recommendationCubit.getPromotedRoomId(room.id ?? '');
      if (promotedRoomId != null) {
        // L·∫•y score th·ª±c t·ª´ RecommendationCubit
        final score = _recommendationCubit.getPromotedRoomScore(room.id ?? '');
        roomScores[room.id ?? ''] = score;
        promotedRooms.add(room);
      } else {  
        normalRooms.add(room);
      }
    }
    
    // S·∫Øp x·∫øp promoted rooms theo score gi·∫£m d·∫ßn
    promotedRooms.sort((a, b) {
      final scoreA = roomScores[a.id] ?? 0.0;
      final scoreB = roomScores[b.id] ?? 0.0;
      return scoreB.compareTo(scoreA);
    });
    
    // Ph√¢n b·ªë promoted rooms v√†o c√°c v·ªã tr√≠ d·ª±a tr√™n score
    final result = List<Room>.from(normalRooms);
    
    // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng ph√≤ng th∆∞·ªùng gi·ªØa c√°c promoted room
    final int spacing = math.max(1, normalRooms.length ~/ (promotedRooms.length + 1));
    
    // Ch√®n c√°c promoted room v√†o k·∫øt qu·∫£
    for (int i = 0; i < promotedRooms.length; i++) {
      // V·ªã tr√≠ ch√®n d·ª±a tr√™n score - ph√≤ng c√≥ score cao h∆°n s·∫Ω xu·∫•t hi·ªán s·ªõm h∆°n
      // Nh∆∞ng v·∫´n ƒë·∫£m b·∫£o kh√¥ng li√™n t·ª•c
      int insertPosition = math.min(i * (spacing + 1), result.length);
      
      // Th√™m m·ªôt y·∫øu t·ªë ng·∫´u nhi√™n nh·ªè trong ph·∫°m vi ƒë∆∞·ª£c cho ph√©p
      if (insertPosition > 0 && insertPosition < result.length && spacing > 1) {
        // T·∫°o ƒë·ªô dao ƒë·ªông ng·∫´u nhi√™n nh·ªè xung quanh v·ªã tr√≠ d·ª± ki·∫øn
        final randomOffset = math.Random().nextInt(math.min(3, spacing)) - 1;
        insertPosition = math.max(0, math.min(result.length, insertPosition + randomOffset));
      }
      
      // Ch√®n promoted room v√†o v·ªã tr√≠ ƒë√£ t√≠nh
      result.insert(insertPosition, promotedRooms[i]);
    }
    
    // Debug ƒë·ªÉ ki·ªÉm tra
    debugPrint('üí° Distributed ${promotedRooms.length} promoted rooms into ${result.length} total rooms');
    for (int i = 0; i < result.length; i++) {
      final room = result[i];
      final isPromoted = _recommendationCubit.getPromotedRoomId(room.id ?? '') != null;
      if (isPromoted) {
        debugPrint('  üìç Position $i: Promoted Room ${room.id} (Score: ${roomScores[room.id] ?? 'N/A'})');
      }
    }
    
    return result;
  }
} 