import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter/foundation.dart';
import 'package:get_it/get_it.dart';
import 'package:roomily/core/services/auth_service.dart';
import 'package:roomily/core/utils/format_utils.dart';
import 'package:roomily/core/utils/result.dart';
import 'package:roomily/data/blocs/home/room_with_images_cubit.dart';
import 'package:roomily/data/models/models.dart';
import 'package:roomily/data/repositories/recommendation_repository.dart';
import 'package:roomily/data/repositories/room_repository.dart';
import 'package:roomily/data/repositories/room_image_repository.dart';
import 'package:roomily/presentation/widgets/home/featured_room_section.dart';
import 'package:roomily/presentation/widgets/home/room_card.dart';

// States
abstract class RecommendationState extends Equatable {
  const RecommendationState();

  @override
  List<Object> get props => [];
}

class RecommendationInitial extends RecommendationState {}

class RecommendationLoading extends RecommendationState {}

class RecommendationLoaded extends RecommendationState {
  final List<RoomWithImages> roomsWithImages;
  final int total;
  final int page;
  final int pageSize;
  final int pages;
  final bool hasMoreData;

  const RecommendationLoaded({
    required this.roomsWithImages,
    required this.total,
    required this.page,
    required this.pageSize,
    required this.pages,
  }) : hasMoreData = page < pages;

  @override
  List<Object> get props => [roomsWithImages, total, page, pageSize, pages, hasMoreData];
}

class RecommendationError extends RecommendationState {
  final String message;

  const RecommendationError({required this.message});

  @override
  List<Object> get props => [message];
}

// Enhancement to RoomWithImages to include recommendation info
class EnhancedRoomWithImages extends RoomWithImages {
  final double score;
  final bool isPromoted;
  final String? promotedRoomId;

  EnhancedRoomWithImages({
    required Room room,
    required List<RoomImage> images,
    required this.score,
    required this.isPromoted,
    this.promotedRoomId,
  }) : super(room: room, images: images);
}

// Cubit ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i g·ª£i √Ω ph√≤ng
class RecommendationCubit extends Cubit<RecommendationState> {
  final RecommendationRepository _recommendationRepository;
  final RoomRepository _roomRepository;
  final RoomImageRepository _roomImageRepository;
  final AuthService? _authService;
  
  // Add map to store promotedRoomId by roomId
  final Map<String, String> _promotedRoomsMap = {};

  RecommendationCubit({
    required RecommendationRepository recommendationRepository,
    required RoomRepository roomRepository,
    required RoomImageRepository roomImageRepository,
    AuthService? authService,
  })  : _recommendationRepository = recommendationRepository,
        _roomRepository = roomRepository,
        _roomImageRepository = roomImageRepository,
        _authService = authService ?? GetIt.instance<AuthService>(),
        super(RecommendationInitial());

  Future<void> loadRecommendedRooms({
    int? topK,
    int page = 1,
    int? pageSize,
    bool isLoadMore = false,
  }) async {
    try {
      // N·∫øu kh√¥ng ph·∫£i load th√™m, hi·ªÉn th·ªã tr·∫°ng th√°i loading
      if (!isLoadMore) {
        emit(RecommendationLoading());
      }

      // L·∫•y userId t·ª´ AuthService
      final userId = _authService?.userId;
      if (userId == null) {
        emit(const RecommendationError(message: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'));
        return;
      }

      debugPrint('üß© T·∫£i ph√≤ng ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t cho ng∆∞·ªùi d√πng: $userId (trang $page)');

      // L·∫•y danh s√°ch ID ph√≤ng ƒë∆∞·ª£c g·ª£i √Ω v·ªõi ph√¢n trang
      final recommendationResult = await _recommendationRepository.getRecommendedRoomIds(
        userId,
        topK: topK,
        page: page,
        pageSize: pageSize,
      );

      switch (recommendationResult) {
        case Success(data: final pagination):
          final List<RoomWithImages> roomsWithImages = [];

          // T·∫£i th√¥ng tin chi ti·∫øt v√† h√¨nh ·∫£nh cho t·ª´ng ph√≤ng t·ª´ danh s√°ch recommendations
          for (final recommendation in pagination.recommendations) {
            try {
              final roomId = recommendation.roomId;
              final roomResult = await _roomRepository.getRoom(roomId);

              switch (roomResult) {
                case Success(data: final room):
                  final imagesResult = await _roomImageRepository.getRoomImages(roomId);

                  switch (imagesResult) {
                    case Success(data: final images):
                      // S·ª≠ d·ª•ng EnhancedRoomWithImages ƒë·ªÉ l∆∞u tr·ªØ th√™m th√¥ng tin score v√† isPromoted
                      roomsWithImages.add(EnhancedRoomWithImages(
                        room: room,
                        images: images,
                        score: recommendation.score,
                        isPromoted: recommendation.isPromoted,
                        promotedRoomId: recommendation.promotedRoomId,
                      ));
                    case Failure():
                      // N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c h√¨nh ·∫£nh, v·∫´n th√™m ph√≤ng v·ªõi danh s√°ch h√¨nh ·∫£nh r·ªóng
                      roomsWithImages.add(EnhancedRoomWithImages(
                        room: room,
                        images: [],
                        score: recommendation.score,
                        isPromoted: recommendation.isPromoted,
                        promotedRoomId: recommendation.promotedRoomId,
                      ));
                  }
                case Failure(message: final message):
                  // B·ªè qua ph√≤ng n√†y n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c th√¥ng tin
                  debugPrint('‚ö†Ô∏è Failed to load room $roomId: $message');
              }
            } catch (e) {
              debugPrint('‚ö†Ô∏è Error loading room ${recommendation.roomId}: $e');
            }
          }

          // S·∫Øp x·∫øp ph√≤ng theo score gi·∫£m d·∫ßn
          roomsWithImages.sort((a, b) {
            if (a is EnhancedRoomWithImages && b is EnhancedRoomWithImages) {
              return b.score.compareTo(a.score);
            }
            return 0;
          });

          // ƒê∆∞a c√°c ph√≤ng ƒë∆∞·ª£c promoted l√™n ƒë·∫ßu
          final promotedRooms = roomsWithImages.where((room) {
            return room is EnhancedRoomWithImages && room.isPromoted;
          }).toList();

          final regularRooms = roomsWithImages.where((room) {
            return room is EnhancedRoomWithImages && !room.isPromoted;
          }).toList();

          final sortedRooms = [...promotedRooms, ...regularRooms];

          // N·∫øu ƒëang load th√™m, k·∫øt h·ª£p v·ªõi d·ªØ li·ªáu c≈©
          if (isLoadMore && state is RecommendationLoaded) {
            final currentState = state as RecommendationLoaded;
            final combinedRooms = [...currentState.roomsWithImages, ...sortedRooms];

            emit(RecommendationLoaded(
              roomsWithImages: combinedRooms,
              total: pagination.total,
              page: pagination.page,
              pageSize: pagination.pageSize,
              pages: pagination.pages,
            ));
          } else {
            emit(RecommendationLoaded(
              roomsWithImages: sortedRooms,
              total: pagination.total,
              page: pagination.page,
              pageSize: pagination.pageSize,
              pages: pagination.pages,
            ));
          }

        case Failure(message: final message):
          emit(RecommendationError(message: message));
      }
    } catch (e) {
      emit(RecommendationError(message: e.toString()));
    }
  }

  /// Loads promoted rooms for current user and stores a mapping of roomId to promotedRoomId
  Future<void> loadPromotedRooms() async {
    try {
      // L·∫•y userId t·ª´ AuthService
      final userId = _authService?.userId;
      if (userId == null) {
        debugPrint("‚ö†Ô∏è No userId available for loading promoted rooms");
        return;
      }

      debugPrint("üîç Loading promoted rooms for user: $userId");
      final result = await _recommendationRepository.getPromotedRooms(userId);

      switch (result) {
        case Success(data: final pagination):
          // Reset existing maps
          _promotedRoomsMap.clear();
          _promotedRoomScores.clear();
          
          // Store mapping of roomId to promotedRoomId and scores
          for (final recommendation in pagination.recommendations) {
            if (recommendation.isPromoted && recommendation.promotedRoomId != null) {
              _promotedRoomsMap[recommendation.roomId] = recommendation.promotedRoomId!;
              _promotedRoomScores[recommendation.roomId] = recommendation.score;
              debugPrint("üìù Added promoted room: ${recommendation.roomId} -> ${recommendation.promotedRoomId} (score: ${recommendation.score})");
            }
          }
          
          debugPrint("‚úÖ Loaded ${_promotedRoomsMap.length} promoted room mappings with scores");
        case Failure(message: final message):
          debugPrint("‚ùå Failed to load promoted rooms: $message");
      }
    } catch (e) {
      debugPrint("‚ùå Error loading promoted rooms: $e");
    }
  }

  /// Checks if a room is promoted
  bool isRoomPromoted(String roomId) {
    return _promotedRoomsMap.containsKey(roomId);
  }

  /// Get promotedRoomId for a roomId with null safety
  String? getPromotedRoomId(String roomId) {
    return _promotedRoomsMap[roomId];
  }
  
  /// L∆∞u tr·ªØ scores c·ªßa m·ªói promoted room theo roomId
  final Map<String, double> _promotedRoomScores = {};
  
  /// Get score for a promoted room with null safety
  double getPromotedRoomScore(String roomId) {
    return _promotedRoomScores[roomId] ?? 0.0;
  }

  // Chuy·ªÉn ƒë·ªïi t·ª´ RoomWithImages sang RoomCardData
  List<RoomCardData> convertToRoomCardData(List<RoomWithImages> roomsWithImages) {
    return roomsWithImages.map((item) {
      final room = item.room;
      final images = item.images;

      // N·∫øu l√† EnhancedRoomWithImages, t·∫°o PromotedRoomCardData
      if (item is EnhancedRoomWithImages) {
        return PromotedRoomCardData(
          imageUrl: images.isNotEmpty ? images.first.url : '',
          name: room.title,
          price: FormatUtils.formatCurrency(room.price),
          address: room.address,
          squareMeters: room.squareMeters.toInt(),
          id: room.id,
          isPromoted: item.isPromoted,
          score: item.score,
          promotedRoomId: item.promotedRoomId,
        );
      }

      // Ki·ªÉm tra n·∫øu ph√≤ng c√≥ trong _promotedRoomsMap
      final promotedRoomId = _promotedRoomsMap[room.id];
      if (promotedRoomId != null) {
        return PromotedRoomCardData(
          imageUrl: images.isNotEmpty ? images.first.url : '',
          name: room.title,
          price: FormatUtils.formatCurrency(room.price),
          address: room.address,
          squareMeters: room.squareMeters.toInt(),
          id: room.id,
          isPromoted: true,
          score: 1.0, // Default score for promoted rooms
          promotedRoomId: promotedRoomId,
        );
      }

      // Tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng, t·∫°o RoomCardData th√¥ng th∆∞·ªùng
      return RoomCardData(
        imageUrl: images.isNotEmpty ? images.first.url : '',
        name: room.title,
        price: FormatUtils.formatCurrency(room.price),
        address: room.address,
        squareMeters: room.squareMeters.toInt(),
        id: room.id,
      );
    }).toList();
  }

  // T·∫£i th√™m ph√≤ng (trang ti·∫øp theo)
  Future<void> loadMoreRooms({int? topK, int? pageSize}) async {
    if (state is RecommendationLoaded) {
      final currentState = state as RecommendationLoaded;

      // Ki·ªÉm tra xem c√≤n d·ªØ li·ªáu ƒë·ªÉ t·∫£i kh√¥ng
      if (currentState.hasMoreData) {
        final nextPage = currentState.page + 1;
        await loadRecommendedRooms(
          topK: topK,
          page: nextPage,
          pageSize: pageSize ?? currentState.pageSize,
          isLoadMore: true,
        );
      }
    }
  }

  // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu bao g·ªìm c·∫£ ph√≤ng ƒë∆∞·ª£c g·ª£i √Ω v√† ph√≤ng ƒë∆∞·ª£c qu·∫£ng c√°o
  Future<void> loadInitialData({
    int? topK,
    int page = 1,
    int? pageSize,
  }) async {
    try {
      // L·∫•y userId t·ª´ AuthService
      final userId = _authService?.userId;
      if (userId == null) {
        emit(const RecommendationError(message: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'));
        return;
      }

      // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
      emit(RecommendationLoading());

      // T·∫£i promoted rooms tr∆∞·ªõc
      await loadPromotedRooms();

      // Sau ƒë√≥ t·∫£i recommended rooms
      await loadRecommendedRooms(
        topK: topK,
        page: page,
        pageSize: pageSize,
      );

      debugPrint('‚úÖ ƒê√£ t·∫£i c·∫£ recommended v√† promoted rooms');
    } catch (e) {
      emit(RecommendationError(message: e.toString()));
    }
  }
  
  // H√†m ƒë·ªÉ √°p d·ª•ng filter v√† gi·ªØ th√¥ng tin v·ªÅ promoted room
  Future<List<RoomCardData>> applyFilterAndMarkPromoted(List<RoomWithImages> filteredRooms) async {
    // ƒê·∫£m b·∫£o promoted rooms ƒë√£ ƒë∆∞·ª£c t·∫£i
    if (_promotedRoomsMap.isEmpty) {
      await loadPromotedRooms();
    }
    
    // Chuy·ªÉn ƒë·ªïi c√°c ph√≤ng ƒë√£ l·ªçc th√†nh RoomCardData, ƒë√°nh d·∫•u c√°c ph√≤ng ƒë∆∞·ª£c qu·∫£ng c√°o
    final roomCards = filteredRooms.map((item) {
      final room = item.room;
      final images = item.images;
      
      // Ki·ªÉm tra n·∫øu ph√≤ng c√≥ trong _promotedRoomsMap
      final promotedRoomId = _promotedRoomsMap[room.id];
      if (promotedRoomId != null) {
        return PromotedRoomCardData(
          imageUrl: images.isNotEmpty ? images.first.url : '',
          name: room.title,
          price: FormatUtils.formatCurrency(room.price),
          address: room.address,
          squareMeters: room.squareMeters.toInt(),
          id: room.id,
          isPromoted: true,
          score: 1.0,
          promotedRoomId: promotedRoomId,
        );
      }
      
      // Tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng
      return RoomCardData(
        imageUrl: images.isNotEmpty ? images.first.url : '',
        name: room.title,
        price: FormatUtils.formatCurrency(room.price),
        address: room.address,
        squareMeters: room.squareMeters.toInt(),
        id: room.id,
      );
    }).toList();
    
    debugPrint('üîç ƒê√£ √°p d·ª•ng filter v√† ƒë√°nh d·∫•u ${_promotedRoomsMap.length} promoted rooms');
    return roomCards;
  }
}