import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:get_it/get_it.dart';
import 'package:roomily/core/services/auth_service.dart';

class AuthTokenInterceptor extends Interceptor {
  final List<String> _publicEndpoints = [
    'auth/login',
    'auth/register',
    'auth/forgot-password'
  ];

  // Ki·ªÉm tra xem endpoint c√≥ y√™u c·∫ßu x√°c th·ª±c hay kh√¥ng
  bool _requiresAuthentication(String path) {
    return !_publicEndpoints.any((endpoint) => path.contains(endpoint));
  }

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    final bool needsAuth = _requiresAuthentication(options.path);
    
    if (needsAuth) {
      try {
        // L·∫•y AuthService t·ª´ GetIt
        if (GetIt.I.isRegistered<AuthService>()) {
          final authService = GetIt.I<AuthService>();
          
          // Lu√¥n l·∫•y token m·ªõi nh·∫•t t·ª´ AuthService
          final token = authService.token;
          
          if (token != null && token.isNotEmpty) {
            // X√≥a token c≈© n·∫øu c√≥
            options.headers.remove('Authorization');
            // Th√™m token m·ªõi v√†o header
            options.headers['Authorization'] = 'Bearer $token';
            if (kDebugMode) {
              print('üîê [AuthTokenInterceptor] ƒê√£ th√™m token m·ªõi v√†o request: ${options.uri}');
            }
          } else {
            if (kDebugMode) {
              print('‚ö†Ô∏è [AuthTokenInterceptor] Y√™u c·∫ßu API c·∫ßn x√°c th·ª±c nh∆∞ng kh√¥ng c√≥ token: ${options.uri}');
            }
          }
        } else {
          if (kDebugMode) {
            print('‚ö†Ô∏è [AuthTokenInterceptor] AuthService ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong GetIt');
          }
        }
      } catch (e) {
        if (kDebugMode) {
          print('‚ùå [AuthTokenInterceptor] L·ªói khi th√™m token: $e');
        }
      }
    } else {
      // ƒê·∫£m b·∫£o x√≥a token cho c√°c endpoint kh√¥ng c·∫ßn x√°c th·ª±c
      options.headers.remove('Authorization');
      if (kDebugMode) {
        print('üîì [AuthTokenInterceptor] Request kh√¥ng c·∫ßn token: ${options.uri}');
      }
    }
    
    handler.next(options);
  }

  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    if (err.response?.statusCode == 401) {
      if (kDebugMode) {
        print('üö´ [AuthTokenInterceptor] Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n');
      }
      
      // X·ª≠ l√Ω logout n·∫øu kh√¥ng ph·∫£i l√† request ƒëƒÉng nh·∫≠p
      if (_requiresAuthentication(err.requestOptions.path)) {
        _handleTokenExpired();
      }
    }
    
    handler.next(err);
  }
  
  void _handleTokenExpired() {
    try {
      if (GetIt.I.isRegistered<AuthService>()) {
        final authService = GetIt.I<AuthService>();
        authService.logout();
        if (kDebugMode) {
          print('üîÑ [AuthTokenInterceptor] ƒê√£ ƒëƒÉng xu·∫•t do token h·∫øt h·∫°n');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthTokenInterceptor] L·ªói khi x·ª≠ l√Ω token h·∫øt h·∫°n: $e');
      }
    }
  }
} 