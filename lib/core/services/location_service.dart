import 'package:geolocator/geolocator.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:diacritic/diacritic.dart';

class LocationService {
  final Dio _dio = Dio();
  final String _baseUrl = 'https://provinces.open-api.vn/api';
  
  // L∆∞u tr·ªØ v·ªã tr√≠ cu·ªëi c√πng ƒë·ªÉ tr√°nh ph·∫£i l·∫•y l·∫°i n·∫øu ƒë√£ c√≥
  Position? _lastKnownPosition;
  // Th·ªùi gian t·ªëi ƒëa ƒë·ªÉ l·∫•y v·ªã tr√≠ (ms)
  static const int _locationTimeout = 5000;

  // Ki·ªÉm tra v√† y√™u c·∫ßu quy·ªÅn truy c·∫≠p v·ªã tr√≠
  Future<bool> _checkLocationPermission() async {
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠
    final status = await Permission.location.status;
    
    if (status.isGranted) {
      return true;
    }
    
    // N·∫øu ch∆∞a c√≥ quy·ªÅn, y√™u c·∫ßu quy·ªÅn
    final result = await Permission.location.request();
    return result.isGranted;
  }

  // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
  Future<Position?> getCurrentPosition() async {
    try {
      // N·∫øu ƒë√£ c√≥ v·ªã tr√≠ g·∫ßn ƒë√¢y (trong v√≤ng 1 ph√∫t), tr·∫£ v·ªÅ lu√¥n
      if (_lastKnownPosition != null) {
        final now = DateTime.now();
        final positionTime = _lastKnownPosition!.timestamp ?? DateTime.now();
        final difference = now.difference(positionTime);
        
        // N·∫øu v·ªã tr√≠ l·∫•y ƒë∆∞·ª£c trong v√≤ng 1 ph√∫t, tr·∫£ v·ªÅ lu√¥n
        if (difference.inSeconds < 60) {
          return _lastKnownPosition;
        }
      }
      
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠
      final hasPermission = await _checkLocationPermission();
      if (!hasPermission) {
        return null;
      }
      
      // Ki·ªÉm tra xem d·ªãch v·ª• v·ªã tr√≠ c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
      final isEnabled = await Geolocator.isLocationServiceEnabled();
      if (!isEnabled) {
        // Y√™u c·∫ßu ng∆∞·ªùi d√πng b·∫≠t d·ªãch v·ª• v·ªã tr√≠
        await Geolocator.openLocationSettings();
        return null;
      }
      
      // L·∫•y v·ªã tr√≠ v·ªõi timeout
      _lastKnownPosition = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: Duration(milliseconds: _locationTimeout),
      ).catchError((error) {
        // N·∫øu timeout, th·ª≠ l·∫•y v·ªã tr√≠ cu·ªëi c√πng ƒë√£ bi·∫øt
        return Geolocator.getLastKnownPosition();
      });
      
      return _lastKnownPosition;
    } catch (e) {
      print('L·ªói khi l·∫•y v·ªã tr√≠: $e');
      return null;
    }
  }

  // L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
  Future<List<Map<String, dynamic>>> getProvinces() async {
    try {
      final response = await _dio.get('$_baseUrl/p/');
      if (response.statusCode == 200) {
        final provinces = List<Map<String, dynamic>>.from(response.data);

        for (var province in provinces) {
          String name = province['name'] as String;

          if (name.startsWith('Th√†nh ph·ªë ')) {
            name = name.replaceFirst('Th√†nh ph·ªë ', '');
          }

          if (name.startsWith('T·ªânh ')) {
            name = name.replaceFirst('T·ªânh ', '');
          }

          province['original_name'] = province['name'];
          province['name'] = name;
        }

        // S·∫Øp x·∫øp kh√¥ng d·∫•u ƒë·ªÉ ƒë√∫ng quy t·∫Øc ti·∫øng Vi·ªát
        provinces.sort((a, b) =>
            removeDiacritics(a['name'] as String)
                .compareTo(removeDiacritics(b['name'] as String)));

        return provinces;
      }
      return [];
    } catch (e) {
      debugPrint('Error fetching provinces: $e');
      return [];
    }
  }



  // L·∫•y danh s√°ch qu·∫≠n/huy·ªán theo m√£ t·ªânh/th√†nh ph·ªë
  Future<List<Map<String, dynamic>>> getDistricts(int provinceCode) async {
    try {
      final response = await _dio.get('$_baseUrl/p/$provinceCode?depth=2');
      if (response.statusCode == 200 && response.data['districts'] != null) {
        return List<Map<String, dynamic>>.from(response.data['districts']);
      }
      return [];
    } catch (e) {
      debugPrint('Error fetching districts: $e');
      return [];
    }
  }
  
  // L·∫•y m√£ t·ªânh/th√†nh ph·ªë t·ª´ t√™n
  Future<int?> getProvinceCode(String provinceName) async {
    try {
      final provinces = await getProvinces();
      final province = provinces.firstWhere(
        (p) => p['name'].toString().toLowerCase() == provinceName.toLowerCase(),
        orElse: () => {'code': null},
      );
      return province['code'] as int?;
    } catch (e) {
      debugPrint('Error getting province code: $e');
      return null;
    }
  }
  
  // L·∫•y danh s√°ch ph∆∞·ªùng/x√£ theo m√£ qu·∫≠n/huy·ªán
  Future<List<Map<String, dynamic>>> getWards(int districtCode) async {
    debugPrint('üîç Fetching wards for district code: $districtCode');
    try {
      final response = await _dio.get('$_baseUrl/d/$districtCode?depth=2');
      if (response.statusCode == 200) {
        debugPrint('‚úÖ API response received for district $districtCode');
        if (response.data['wards'] != null) {
          final wards = List<Map<String, dynamic>>.from(response.data['wards']);
          debugPrint('‚úÖ Found ${wards.length} wards for district $districtCode');
          return wards;
        } else {
          debugPrint('‚ö†Ô∏è Response does not contain "wards" field: ${response.data}');
          return [];
        }
      } else {
        debugPrint('‚ö†Ô∏è API returned status code ${response.statusCode}');
        return [];
      }
    } catch (e) {
      debugPrint('‚ùå Error fetching wards: $e');
      return [];
    }
  }
} 