import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:roomily/core/services/secure_storage_service.dart';
import 'package:roomily/data/repositories/auth_repository.dart';
import 'package:roomily/data/models/login_request.dart';
import 'package:roomily/data/models/register_request.dart';
import 'package:get_it/get_it.dart';
import 'package:dio/dio.dart';
import 'package:roomily/core/config/dio_config.dart';
import 'package:roomily/data/repositories/favorite_repository.dart';
import 'package:roomily/data/repositories/chat_room_repository.dart';
import 'package:roomily/data/repositories/room_repository.dart';
import 'package:roomily/data/repositories/review_repository.dart';
import 'package:roomily/data/repositories/room_image_repository.dart';
import 'package:roomily/data/repositories/favorite_repository_impl.dart';
import 'package:roomily/data/repositories/chat_room_repository_impl.dart';
import 'package:roomily/data/repositories/room_repository_impl.dart';
import 'package:roomily/data/repositories/review_repository_impl.dart';
import 'package:roomily/data/repositories/room_image_repository_impl.dart';
import 'package:roomily/core/cache/cache.dart';
import 'package:roomily/data/repositories/find_partner_repository.dart';
import 'package:roomily/data/repositories/find_partner_repository_impl.dart';

/// Service qu·∫£n l√Ω tr·∫°ng th√°i x√°c th·ª±c trung t√¢m
/// L√† ngu·ªìn th√¥ng tin x√°c th·ª±c duy nh·∫•t cho to√†n b·ªô ·ª©ng d·ª•ng
class AuthService {
  final AuthRepository _authRepository;
  final SecureStorageService _secureStorage;
  
  // L∆∞u tr·ªØ tr·∫°ng th√°i x√°c th·ª±c hi·ªán t·∫°i
  bool _isAuthenticated = false;
  String? _userId;
  String? _token;
  List<String> _roles = [];
  bool _isLandlord = false;
  String? _username;
  
  // Stream controllers ƒë·ªÉ th√¥ng b√°o c√°c thay ƒë·ªïi tr·∫°ng th√°i
  final _authStateController = StreamController<bool>.broadcast();
  final _userDataController = StreamController<Map<String, dynamic>>.broadcast();
  
  // Stream ƒë·ªÉ c√°c th√†nh ph·∫ßn c√≥ th·ªÉ l·∫Øng nghe
  Stream<bool> get authStateChanges => _authStateController.stream;
  Stream<Map<String, dynamic>> get userDataChanges => _userDataController.stream;
  
  // Getters cho tr·∫°ng th√°i x√°c th·ª±c
  bool get isAuthenticated => _isAuthenticated;
  String? get userId => _userId;
  String? get token => _token;
  List<String> get roles => _roles;
  bool get isLandlord => _isLandlord;
  String? get username => _username;
  
  AuthService(this._authRepository, this._secureStorage) {
    // Kh·ªüi t·∫°o tr·∫°ng th√°i t·ª´ storage khi service ƒë∆∞·ª£c t·∫°o
    _loadAuthState();
  }
  
  /// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
  Future<bool> register(RegisterRequest request) async {
    try {
      if (kDebugMode) {
        print('üîí [AuthService] ƒêang ƒëƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi: ${request.username}');
      }
      
      // Delegate to repository
      final success = await _authRepository.register(request);
      
      if (success) {
        if (kDebugMode) {
          print('‚úÖ [AuthService] ƒêƒÉng k√Ω th√†nh c√¥ng cho user: ${request.username}');
        }
      } else {
        if (kDebugMode) {
          print('‚ùå [AuthService] ƒêƒÉng k√Ω th·∫•t b·∫°i cho user: ${request.username}');
        }
      }
      
      return success;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthService] ƒêƒÉng k√Ω th·∫•t b·∫°i: $e');
      }
      return false;
    }
  }
  
  /// ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
  Future<bool> login(String usernameOrEmail, String password) async {
    try {
      // Clear tr·∫°ng th√°i hi·ªán t·∫°i
      await _clearAuthState();
      
      if (kDebugMode) {
        print('üîí [AuthService] ƒêang ƒëƒÉng nh·∫≠p v·ªõi $usernameOrEmail');
      }
      
      // Login th√¥ng qua repository
      final response = await _authRepository.login(
        LoginRequest(usernameOrEmail: usernameOrEmail, password: password)
      );
      
      if (kDebugMode) {
        print('‚úÖ [AuthService] ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho user: ${response.username}');
      }
      
      // L∆∞u tr·∫°ng th√°i m·ªõi
      await _updateAuthState(
        userId: response.userId,
        token: response.accessToken,
        roles: response.role,
        isLandlord: _checkIsLandlord(response.role),
        username: response.username,
      );
      
      // Kh·ªüi t·∫°o l·∫°i Dio v·ªõi token m·ªõi
      await _reinitializeDio(response.accessToken);
      
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthService] ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: $e');
      }
      await _clearAuthState();
      return false;
    }
  }
  
  /// ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
  Future<void> logout() async {
    if (kDebugMode) {
      print('üîí [AuthService] ƒêang ƒëƒÉng xu·∫•t...');
    }

    try {
      // 1. Clear auth state first to ensure all references to old user are gone
      await _clearAuthState();
      
      // 2. Clear Dio instance and its interceptors
      if (GetIt.I.isRegistered<Dio>()) {
        final dio = GetIt.I<Dio>();
        dio.interceptors.clear();
        GetIt.I.unregister<Dio>();
      }
      
      // 3. Create new Dio instance without token
      await _reinitializeDio(null);
      
      // 4. Call logout API (with new clean Dio instance)
      await _authRepository.logout();
      
      // 5. Force reinitialize ALL repositories to ensure no cached state
      await _reinitializeAllRepositories();
      
      if (kDebugMode) {
        print('‚úÖ [AuthService] ƒêƒÉng xu·∫•t th√†nh c√¥ng');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthService] L·ªói trong qu√° tr√¨nh ƒëƒÉng xu·∫•t: $e');
      }
      rethrow;
    }
  }
  
  /// Ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c
  Future<bool> checkAuthState() async {
    if (kDebugMode) {
      print('üîç [AuthService] Ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c');
    }
    // ƒê·ªçc l·∫°i t·ª´ secure storage ƒë·ªÉ ƒë·∫£m b·∫£o c·∫≠p nh·∫≠t
    await _loadAuthState();
    return _isAuthenticated;
  }
  
  /// T·∫£i tr·∫°ng th√°i x√°c th·ª±c t·ª´ secure storage
  Future<void> _loadAuthState() async {
    try {
      final token = await _secureStorage.getToken();
      final userId = await _secureStorage.getUserId();
      final roles = await _secureStorage.getRoles();
      final username = await _secureStorage.getUsername();
      
      if (kDebugMode) {
        print('üîç [AuthService] ƒê√£ ƒë·ªçc t·ª´ secure storage - Token: ${token != null}, UserId: $userId');
      }
      
      if (token != null && userId != null) {
        await _updateAuthState(
          userId: userId,
          token: token,
          roles: roles,
          isLandlord: _checkIsLandlord(roles),
          username: username,
        );
        
        // Kh·ªüi t·∫°o l·∫°i Dio v·ªõi token ƒë√£ l∆∞u
        await _reinitializeDio(token);
      } else {
        await _clearAuthState();
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthService] L·ªói khi t·∫£i tr·∫°ng th√°i x√°c th·ª±c: $e');
      }
      await _clearAuthState();
    }
  }
  
  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
  Future<void> _updateAuthState({
    required String userId, 
    required String token,
    required List<String> roles,
    required bool isLandlord,
    String? username,
  }) async {
    // C·∫≠p nh·∫≠t bi·∫øn n·ªôi b·ªô
    _isAuthenticated = true;
    _userId = userId;
    _token = token;
    _roles = roles;
    _isLandlord = isLandlord;
    _username = username;
    
    // L∆∞u v√†o secure storage
    await _secureStorage.saveToken(token);
    await _secureStorage.saveUserId(userId);
    await _secureStorage.saveRoles(roles);
    if (username != null) {
      await _secureStorage.saveUsername(username);
    }
    
    // Th√¥ng b√°o cho c√°c listeners
    _authStateController.add(true);
    _userDataController.add({
      'userId': userId,
      'roles': roles,
      'isLandlord': isLandlord,
      'username': username,
    });
    
    if (kDebugMode) {
      print('‚úÖ [AuthService] Tr·∫°ng th√°i x√°c th·ª±c ƒë√£ c·∫≠p nh·∫≠t - userId: $userId, roles: $roles');
    }
  }
  
  /// X√≥a tr·∫°ng th√°i x√°c th·ª±c
  Future<void> _clearAuthState() async {
    // X√≥a bi·∫øn n·ªôi b·ªô
    _isAuthenticated = false;
    _userId = null;
    _token = null;
    _roles = [];
    _isLandlord = false;
    _username = null;
    
    // X√≥a t·ª´ secure storage
    await _secureStorage.clearAuthData();
    
    // Th√¥ng b√°o cho c√°c listeners
    _authStateController.add(false);
    _userDataController.add({
      'userId': null,
      'roles': [],
      'isLandlord': false,
      'username': null,
    });
    
    if (kDebugMode) {
      print('üîÑ [AuthService] Tr·∫°ng th√°i x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c x√≥a');
    }
  }
  
  /// Ki·ªÉm tra role landlord
  bool _checkIsLandlord(List<String> roles) {
    const String ROLE_LANDLORD = "ROLE_LANDLORD";
    
    // Ki·ªÉm tra chu·∫©n x√°c
    if (roles.contains(ROLE_LANDLORD)) {
      return true;
    }
    
    // Ki·ªÉm tra case-insensitive
    final String landlordLower = ROLE_LANDLORD.toLowerCase();
    for (final role in roles) {
      if (role.toLowerCase() == landlordLower) {
        return true;
      }
    }
    
    // Ki·ªÉm tra n·∫øu role ch·ªâ ch·ª©a "LANDLORD" kh√¥ng c√≥ prefix
    for (final role in roles) {
      if (role.toLowerCase() == "landlord") {
        return true;
      }
    }
    
    // Ki·ªÉm tra n·∫øu role c√≥ ch·ª©a "landlord" b·∫•t k·ª≥ ƒë√¢u
    for (final role in roles) {
      if (role.toLowerCase().contains("landlord")) {
        return true;
      }
    }
    
    return false;
  }
  
  /// Kh·ªüi t·∫°o l·∫°i Dio v·ªõi token m·ªõi
  Future<void> _reinitializeDio(String? token) async {
    try {
      if (kDebugMode) {
        print('üîÑ [AuthService] ƒêang kh·ªüi t·∫°o l·∫°i Dio v·ªõi ${token != null ? "token m·ªõi" : "kh√¥ng c√≥ token"}...');
      }
      
      // T·∫°o Dio m·ªõi v·ªõi token
      final dio = DioConfig.createDio();
      
      // ƒê·∫£m b·∫£o token ƒë∆∞·ª£c th√™m v√†o header n·∫øu c√≥
      if (token != null && token.isNotEmpty) {
        dio.options.headers['Authorization'] = 'Bearer $token';
      } else {
        // X√≥a token n·∫øu c√≥
        dio.options.headers.remove('Authorization');
      }
      
      // L·∫•y GetIt instance
      final getIt = GetIt.instance;
      
      // Unregister Dio c≈© n·∫øu c√≥
      if (getIt.isRegistered<Dio>()) {
        getIt.unregister<Dio>();
      }
      
      // ƒêƒÉng k√Ω Dio m·ªõi
      getIt.registerLazySingleton<Dio>(() => dio);
      
      // Kh·ªüi t·∫°o l·∫°i c√°c repository
      await _reinitializeRepositories();
      
      if (kDebugMode) {
        print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i Dio ${token != null ? "v·ªõi token m·ªõi" : "kh√¥ng c√≥ token"} th√†nh c√¥ng');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthService] L·ªói khi kh·ªüi t·∫°o l·∫°i Dio: $e');
      }
    }
  }
  
  /// Kh·ªüi t·∫°o l·∫°i c√°c repository sau khi Dio ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i
  Future<void> _reinitializeRepositories() async {
    try {
      if (kDebugMode) {
        print('üîÑ [AuthService] ƒêang kh·ªüi t·∫°o l·∫°i c√°c repository...');
      }
      
      // L·∫•y GetIt instance
      final getIt = GetIt.instance;
      
      // L·∫•y Dio m·ªõi
      final dio = getIt<Dio>();
      
      // Danh s√°ch c√°c repository c·∫ßn kh·ªüi t·∫°o l·∫°i
      // Ch·ªâ kh·ªüi t·∫°o l·∫°i c√°c repository ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥
      if (getIt.isRegistered<FavoriteRepository>()) {
        getIt.unregister<FavoriteRepository>();
        getIt.registerLazySingleton<FavoriteRepository>(() => FavoriteRepositoryImpl(dio: dio));
        if (kDebugMode) {
          print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i FavoriteRepository');
        }
      }
      
      if (getIt.isRegistered<ChatRoomRepository>()) {
        getIt.unregister<ChatRoomRepository>();
        getIt.registerLazySingleton<ChatRoomRepository>(() => ChatRoomRepositoryImpl(dio: dio));
        if (kDebugMode) {
          print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i ChatRoomRepository');
        }
      }
      
      if (getIt.isRegistered<RoomRepository>()) {
        getIt.unregister<RoomRepository>();
        // RoomRepository c·∫ßn th√™m tham s·ªë cache
        final cache = getIt.isRegistered<Cache>() ? getIt<Cache>() : null;
        getIt.registerLazySingleton<RoomRepository>(() => RoomRepositoryImpl(dio: dio, cache: cache));
        if (kDebugMode) {
          print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i RoomRepository');
        }
      }
      
      if (getIt.isRegistered<ReviewRepository>()) {
        getIt.unregister<ReviewRepository>();
        getIt.registerLazySingleton<ReviewRepository>(() => ReviewRepositoryImpl(dio: dio));
        if (kDebugMode) {
          print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i ReviewRepository');
        }
      }
      
      // Kh·ªüi t·∫°o l·∫°i FindPartnerRepository
      if (getIt.isRegistered<FindPartnerRepository>()) {
        getIt.unregister<FindPartnerRepository>();
        getIt.registerLazySingleton<FindPartnerRepository>(() => FindPartnerRepositoryImpl(dio: dio));
        if (kDebugMode) {
          print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i FindPartnerRepository');
        }
      }
      
      // Ti·∫øp t·ª•c v·ªõi c√°c repository kh√°c...
      if (kDebugMode) {
        print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i t·∫•t c·∫£ repository');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthService] L·ªói khi kh·ªüi t·∫°o l·∫°i repositories: $e');
      }
    }
  }
  
  /// Kh·ªüi t·∫°o l·∫°i T·∫§T C·∫¢ c√°c repository, b·∫•t k·ªÉ c√≥ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥ hay kh√¥ng
  Future<void> _reinitializeAllRepositories() async {
    try {
      if (kDebugMode) {
        print('üîÑ [AuthService] ƒêang kh·ªüi t·∫°o l·∫°i t·∫•t c·∫£ c√°c repository v√† services...');
      }
      
      // L·∫•y GetIt instance
      final getIt = GetIt.instance;
      
      // L·∫•y Dio m·ªõi
      final dio = getIt<Dio>();
      
      // Reset c√°c repository quan tr·ªçng d√π ƒë√£ ƒëƒÉng k√Ω hay ch∆∞a
      // FavoriteRepository
      if (getIt.isRegistered<FavoriteRepository>()) {
        getIt.unregister<FavoriteRepository>();
      }
      getIt.registerLazySingleton<FavoriteRepository>(() => FavoriteRepositoryImpl(dio: dio));
      
      // ChatRoomRepository
      if (getIt.isRegistered<ChatRoomRepository>()) {
        getIt.unregister<ChatRoomRepository>();
      }
      getIt.registerLazySingleton<ChatRoomRepository>(() => ChatRoomRepositoryImpl(dio: dio));
      
      // RoomRepository
      if (getIt.isRegistered<RoomRepository>()) {
        getIt.unregister<RoomRepository>();
      }
      final cache = getIt.isRegistered<Cache>() ? getIt<Cache>() : null;
      getIt.registerLazySingleton<RoomRepository>(() => RoomRepositoryImpl(dio: dio, cache: cache));
      
      // ReviewRepository
      if (getIt.isRegistered<ReviewRepository>()) {
        getIt.unregister<ReviewRepository>();
      }
      getIt.registerLazySingleton<ReviewRepository>(() => ReviewRepositoryImpl(dio: dio));
      
      // RoomImageRepository
      if (getIt.isRegistered<RoomImageRepository>()) {
        getIt.unregister<RoomImageRepository>();
      }
      getIt.registerLazySingleton<RoomImageRepository>(() => RoomImageRepositoryImpl(dio: dio));
      
      // FindPartnerRepository
      if (getIt.isRegistered<FindPartnerRepository>()) {
        getIt.unregister<FindPartnerRepository>();
      }
      getIt.registerLazySingleton<FindPartnerRepository>(() => FindPartnerRepositoryImpl(dio: dio));
      
      // Clear any caches to ensure fresh state
      if (getIt.isRegistered<Cache>() && cache != null) {
        await cache.clear();
      }
      
      if (kDebugMode) {
        print('‚úÖ [AuthService] ƒê√£ kh·ªüi t·∫°o l·∫°i t·∫•t c·∫£ c√°c repository v√† x√≥a cache');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå [AuthService] L·ªói khi kh·ªüi t·∫°o l·∫°i c√°c repository: $e');
      }
    }
  }
  
  void dispose() {
    _authStateController.close();
    _userDataController.close();
  }
} 